<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anisave</title>
    <link href="/css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        nav {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            background: linear-gradient(135deg, #333, #444);
            color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            justify-content: space-between;
        }

        nav img {
            width: 50px;
            height: auto;
        }

        nav h1 {
            margin: 0;
            font-size: 24px;
        }

        #alert, #comment, #load {
            margin: 20px;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        #comment textarea, #query {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        #stardropdown {
            display: flex;
            gap: 5px;
        }

        #stardropdown button {
            padding: 10px;
            background-color: #f0f0f0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #stardropdown button.active {
            background-color: #ffdd57;
        }

        .dataonload {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .dataonload p {
            margin: 0;
            flex-grow: 1;
        }

        .dataonload span {
            margin-left: 10px;
        }

        .dataonload button {
            background-color: #ff5b5b;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            padding: 5px 10px;
        }

        .dataonload button:hover {
            background-color: #ff3b3b;
        }

        #send {
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        #send:hover {
            background-color: #218838;
        }

        #alert button {
            background-color: #ff5b5b;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            padding: 5px 10px;
        }

        #alert p {
            margin: 10px 0;
        }

        #search {
            display: flex;
            gap: 10px;
        }

        #search input[type="text"] {
            width: 80%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #search select {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>
</head>
<body>

    <nav>
        <img src="logo.png" alt="Anisave Logo"> 
        <h1>Anisave</h1>
    </nav>

    <div id="alert" style="display: none;">
        <h2>Alert</h2>
        <p></p>
        <button>â›Œ</button>
    </div>

    <div id="comment">
        <input id="query" placeholder="Enter your comment..."></input>
        <div id="stardropdown"></div><br>
        <button id="send">Submit</button>
    </div>

    <div id="search">
        <input type="text" id="searchInput" placeholder="Search comments...">
        <select id="starFilter">
            <option value="">All Stars</option>
            <option value="1">1 â˜…</option>
            <option value="2">2 â˜…â˜…</option>
            <option value="3">3 â˜…â˜…â˜…</option>
            <option value="4">4 â˜…â˜…â˜…â˜…</option>
            <option value="5">5 â˜…â˜…â˜…â˜…â˜…</option>
        </select>
    </div>

    <div id="load"></div>

    <script>
        const doc = document;
        const stardropdown = doc.getElementById("stardropdown");
        const loaddata = doc.getElementById("load");
        const alertBox = doc.getElementById("alert");
        const searchInput = doc.getElementById("searchInput");
        const starFilter = doc.getElementById("starFilter");

        // Function to render star rating buttons
        function renderStars() {
            stardropdown.innerHTML = '';
            for (let star = 1; star <= 5; star++) {
                const buttonstar = doc.createElement("button");
                buttonstar.textContent = `${star} â˜…`;
                buttonstar.id = `${star}star`;
                if (star === 1) buttonstar.classList.add('active'); // Default star rating is 1
                stardropdown.appendChild(buttonstar);
            }
        }

        // Initialize star rating buttons
        renderStars();

        // API URL
        const dburl = "/db";

        // Function to fetch and display comments
        function updatedb(query = "", star = "") {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", `${dburl}?query=${encodeURIComponent(query)}&star=${star}`, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        displayData(xhr.responseText);
                    } else {
                        showAlert("An error occurred while loading the data.");
                    }
                }
            };
            xhr.setRequestHeader("Content-Type", "text/html");
            xhr.send();
        }

        // Function to render comments
        function displayData(data) {
            loaddata.textContent = '';
            const updatesplit = data.split("\n");
            updatesplit.forEach((item, item_num) => {
                if (item != "") {
                    const commentDiv = doc.createElement('div');
                    const contentP = doc.createElement('p');
                    const starSpan = doc.createElement('span');
                    const deleteButton = doc.createElement('button');
                    const starsplit = item.split(' | star: ');

                    contentP.textContent = starsplit[0];
                    starSpan.textContent = ` (${starsplit[1]}) ${"â˜…".repeat(Number(starsplit[1]))}`;
                    deleteButton.textContent = 'ðŸ—‘';
                    deleteButton.id = 'delete';

                    commentDiv.id = "datanum" + item_num;
                    commentDiv.star = starsplit[1];
                    commentDiv.data = starsplit[0];
                    commentDiv.classList.add('dataonload');

                    commentDiv.appendChild(contentP);
                    commentDiv.appendChild(starSpan);
                    commentDiv.appendChild(doc.createElement('br'));
                    commentDiv.appendChild(doc.createElement('br'));
                    commentDiv.appendChild(deleteButton);

                    loaddata.appendChild(commentDiv);
                }
            });
        }

        // Fetch data
        updatedb();

        // Function to save data
        function savedb() {
            const query = doc.getElementById("query").value;
            const star = doc.querySelector("#stardropdown button.active")?.id?.replace('star', '');
            const apiUrl = `/db?data=save&star=${star}&label=${encodeURIComponent(query)}`;

            const xhr = new XMLHttpRequest();
            xhr.open("GET", apiUrl, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        updatedb();
                    } else {
                        showAlert("An error occurred while saving the data.");
                    }
                }
            };
            xhr.send();
        }

        function deldb(query, star) {
            const apiUrl = `/db?data=del&star=${star}&label=${encodeURIComponent(query)}`;

            const xhr = new XMLHttpRequest();
            xhr.open("GET", apiUrl, true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        updatedb();
                    } else {
                        showAlert("An error occurred while deleting the data.");
                    }
                }
            };
            xhr.send();
        }

        // Event listener for star selection
        doc.querySelectorAll("#stardropdown button").forEach(starBtn => {
            starBtn.addEventListener("click", () => {
                doc.querySelectorAll("#stardropdown button").forEach(btn => btn.classList.remove('active'));
                starBtn.classList.add('active');
            });
        });

        // Event listener for Submit button
        doc.getElementById("send").addEventListener("click", savedb);

        // Event listener for Delete button
        doc.addEventListener("click", function(e) {
            if (e.target && e.target.id === "delete") {
                const deletedata = e.target.parentElement;
                deldb(deletedata.data, deletedata.star);
            }
        });

        // Function to show custom alert
        function showAlert(message) {
            alertBox.style.display = 'block';
            alertBox.querySelector('p').textContent = message;
        }

        // Close the alert box when "â›Œ" is clicked
        alertBox.querySelector('button').addEventListener("click", () => {
            alertBox.style.display = 'none';
        });

        // Search functionality with star filter
        searchInput.addEventListener("input", function() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedStar = starFilter.value;
            const comments = doc.querySelectorAll('.dataonload');
            comments.forEach(comment => {
                const text = comment.querySelector('p').textContent.toLowerCase();
                const star = comment.star;
                if (text.includes(searchTerm) && (selectedStar === "" || star === selectedStar)) {
                    comment.style.display = 'flex';
                } else {
                    comment.style.display = 'none';
                }
            });
        });

        // Star filter functionality
        starFilter.addEventListener("change", function() {
            const searchTerm = searchInput.value.toLowerCase();
            const selectedStar = starFilter.value;
            const comments = doc.querySelectorAll('.dataonload');
            comments.forEach(comment => {
                const text = comment.querySelector('p').textContent.toLowerCase();
                const star = comment.star;
                if (text.includes(searchTerm) && (selectedStar === "" || star === selectedStar)) {
                    comment.style.display = 'flex';
                } else {
                    comment.style.display = 'none';
                }
            });
        });

    </script>

</body>
</html>
